{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postDirectory = path.join(process.cwd(), `posts`);\nexport function getSortedPostsData() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileCountents = fs.readFileSync(fullPath, 'utf8');\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  const processContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/home/anet/ドキュメント/shopifyApp/demoApp/nextDemo/lib/posts.js"],"names":["fs","path","matter","remark","html","postDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","postsDirectory","allPostsData","map","fileName","id","replace","fullPath","fileCountents","readFileSync","matterResult","fileContents","data","sort","a","b","date","getAllPostIds","params","getPostData","processContent","use","content","contentHtml","processedContent","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,aAAa,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAA0B,OAA1B,CAAtB;AAEA,OAAO,SAASC,kBAAT,GAA6B;AAChC,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeC,cAAf,CAAlB;AACA,QAAMC,YAAY,GAAGH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI;AAC3C,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AAEA,UAAMC,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUM,cAAV,EAA0BG,QAA1B,CAAjB;AACA,UAAMI,aAAa,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAAtB;AAEA,UAAMG,YAAY,GAAGnB,MAAM,CAACoB,YAAD,CAA3B;AAEA;AACIN,MAAAA;AADJ,OAEOK,YAAY,CAACE,IAFpB;AAIH,GAZoB,CAArB;AAcA,SAAOV,YAAY,CAACW,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,QAAGD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAmB;AACf,aAAO,CAAP;AACH,KAFD,MAEK;AACD,aAAO,CAAC,CAAR;AACH;AACJ,GANM,CAAP;AAOH;AAED,OAAO,SAASC,aAAT,GAAwB;AAC3B,QAAMlB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeC,cAAf,CAAlB;AACA,SAAOF,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI;AAC7B,WAAM;AACFc,MAAAA,MAAM,EAAE;AACJb,QAAAA,EAAE,EAAED,QAAQ,CAAEE,OAAV,CAAkB,OAAlB,EAA2B,EAA3B;AADA;AADN,KAAN;AAKH,GANM,CAAP;AAOH;AAED,OAAO,eAAea,WAAf,CAA2Bd,EAA3B,EAA8B;AACjC,QAAME,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUD,aAAV,EAA0B,GAAEW,EAAG,KAA/B,CAAjB;AACA,QAAMM,YAAY,GAAGtB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AAEA,QAAMG,YAAY,GAAGnB,MAAM,CAACoB,YAAD,CAA3B;AAEA,QAAMS,cAAc,GAAG,MAAM5B,MAAM,GAC9B6B,GADwB,CACpB5B,IADoB,EAExBG,OAFwB,CAEhBc,YAAY,CAACY,OAFG,CAA7B;AAGA,QAAMC,WAAW,GAAGC,gBAAgB,CAACC,QAAjB,EAApB;AAEA;AACIpB,IAAAA,EADJ;AAEIkB,IAAAA;AAFJ,KAGOb,YAAY,CAACE,IAHpB;AAKH","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postDirectory = path.join(process.cwd(), `posts`)\n\nexport function getSortedPostsData(){\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n        const id = fileName.replace(/\\.md$/, '')\n\n        const fullPath = path.join(postsDirectory, fileName)\n        const fileCountents = fs.readFileSync(fullPath, 'utf8')\n\n        const matterResult = matter(fileContents)\n\n        return{\n            id,\n            ...matterResult.data\n        }\n    })\n\n    return allPostsData.sort((a, b) => {\n        if(a.date < b.date){\n            return 1\n        }else{\n            return -1\n        }\n    })\n}\n\nexport function getAllPostIds(){\n    const fileNames = fs.readdirSync(postsDirectory)\n    return fileNames.map(fileName => {\n        return{\n            params: {\n                id: fileName. replace(/\\.md$/, '')\n            }\n        }\n    })\n}\n\nexport async function getPostData(id){\n    const fullPath = path.join(postDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    const matterResult = matter(fileContents)\n\n    const processContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n    const contentHtml = processedContent.toString()\n\n    return{\n        id,\n        contentHtml,\n        ...matterResult.data\n    }\n}"]},"metadata":{},"sourceType":"module"}